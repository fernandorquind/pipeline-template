name: unit test and sonar

on:
  workflow_call:
    inputs:
      trigger:
        description: 'trigger'
        type: string
      unit_test:
        description: 'unit test'
        type:  boolean
      quality_gate:
        description: "Quality gate boolean"
        type:  boolean

jobs:
  UnitTest-sonar:
    runs-on: ubuntu-latest
    env:
      versionAngular: ${{ vars.VERSIONANGULAR }}
    steps:   
      - name: Checkout to project repository 
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: ${{ github.repository }}
          ref: ${{ github.ref_name }} 
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.VERSIONNODE}}.x

      - name: packages node install
        run: |
          if [[ ${{ env.versionAngular }} > 10 ]]; then
            echo "Instalando dependencias de Angular"
            npm i 
          else
            echo "Instalando dependencias de Grunt"
            npm install --save --legacy-peer-deps
            npm install karma karma-coverage --save 
            npm cache clean --force
          fi

      - name: Unit test
        if: inputs.unit_test == true && (startsWith(inputs.trigger, 'feature') || inputs.trigger == 'develop' || startsWith(inputs.trigger, 'hotfix') )
        run: |
          if [[ ${{ env.versionAngular }} > 10 ]]; then
          npm test -- --code-coverage --watch=false --browsers=ChromeHeadless
          else
            grunt certification --force
            grunt karmaconfig
            grunt test --force
          fi

      - name: Repository name
        id: extract_repo_name
        run: echo "repo_name=$(echo ${GITHUB_REPOSITORY} | sed 's:.*/::')" >> $GITHUB_OUTPUT

      - name: Arguments Sonar.properties
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '{'
          tokenSuffix: '}'
          files: '["**/sonar-project.properties"]'
        env:
          ORGANIZATION: ${{ github.REPOSITORY_OWNER }}
          PROJECT_KEY: ${{ github.REPOSITORY_OWNER }}_${{ steps.extract_repo_name.outputs.repo_name }}
          LOGIN: ${{ secrets.SONAR_TOKEN }}
          REPORT_UNIT: ${{ vars.REPORT_UNIT_TEST }}
          URL: https://sonarcloud.io

      - name: Create SonarCloud Project
        if: startsWith(inputs.trigger, 'feature/')
        run: |
          export SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}
          export ORGANIZATION_KEY=${{ github.REPOSITORY_OWNER }}
          export PROJECT_KEY=${{ github.REPOSITORY_OWNER }}_${{ steps.extract_repo_name.outputs.repo_name }}
          export PROJECT_NAME=${{ steps.extract_repo_name.outputs.repo_name }}
          curl -X POST -u "$SONAR_TOKEN:" \
            -d "name=$PROJECT_NAME" \
            -d "project=$PROJECT_KEY" \
            -d "organization=$ORGANIZATION_KEY" \
            "https://sonarcloud.io/api/projects/create"

          curl -X POST \
            -H "Authorization: Bearer $SONAR_TOKEN" \
            -d "project=$PROJECT_KEY" \
            -d "name=develop" \
            "https://sonarcloud.io/api/project_branches/rename"
      - name: SonarCloud Scan
        if: startsWith(inputs.trigger, 'feature') || inputs.trigger == 'develop' || startsWith(inputs.trigger, 'hotfix')
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: ./
          args: >
            -Dsonar.javascript.lcov.reportPaths=${{ vars.REPORT_UNIT_TEST }}
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_TEMPLATE }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate check
        if: inputs.quality_gate == true && (startsWith(inputs.trigger, 'feature/') || inputs.trigger == 'develop' || startsWith(inputs.trigger, 'hotfix') )
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}